/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.recordedlectures.model.impl;

import com.liferay.docs.recordedlectures.model.Lecture;
import com.liferay.docs.recordedlectures.model.LectureModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Lecture service. Represents a row in the &quot;RL_Lecture&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LectureModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LectureImpl}.
 * </p>
 *
 * @author liferay
 * @see LectureImpl
 * @generated
 */
@JSON(strict = true)
public class LectureModelImpl
	extends BaseModelImpl<Lecture> implements LectureModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lecture model instance should use the <code>Lecture</code> interface instead.
	 */
	public static final String TABLE_NAME = "RL_Lecture";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"recordedlectureId", Types.BIGINT}, {"Title", Types.VARCHAR},
		{"videoURL", Types.VARCHAR}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recordedlectureId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("videoURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table RL_Lecture (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,recordedlectureId LONG not null primary key,Title VARCHAR(75) null,videoURL VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table RL_Lecture";

	public static final String ORDER_BY_JPQL =
		" ORDER BY lecture.recordedlectureId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY RL_Lecture.recordedlectureId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RECORDEDLECTUREID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public LectureModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recordedlectureId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecordedlectureId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recordedlectureId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Lecture.class;
	}

	@Override
	public String getModelClassName() {
		return Lecture.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Lecture, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Lecture, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Lecture, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Lecture)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Lecture, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Lecture, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Lecture)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Lecture, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Lecture, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Lecture, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Lecture, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Lecture, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Lecture, Object>>();
		Map<String, BiConsumer<Lecture, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Lecture, ?>>();

		attributeGetterFunctions.put("mvccVersion", Lecture::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion", (BiConsumer<Lecture, Long>)Lecture::setMvccVersion);
		attributeGetterFunctions.put("uuid", Lecture::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Lecture, String>)Lecture::setUuid);
		attributeGetterFunctions.put(
			"recordedlectureId", Lecture::getRecordedlectureId);
		attributeSetterBiConsumers.put(
			"recordedlectureId",
			(BiConsumer<Lecture, Long>)Lecture::setRecordedlectureId);
		attributeGetterFunctions.put("Title", Lecture::getTitle);
		attributeSetterBiConsumers.put(
			"Title", (BiConsumer<Lecture, String>)Lecture::setTitle);
		attributeGetterFunctions.put("videoURL", Lecture::getVideoURL);
		attributeSetterBiConsumers.put(
			"videoURL", (BiConsumer<Lecture, String>)Lecture::setVideoURL);
		attributeGetterFunctions.put("groupId", Lecture::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Lecture, Long>)Lecture::setGroupId);
		attributeGetterFunctions.put("companyId", Lecture::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Lecture, Long>)Lecture::setCompanyId);
		attributeGetterFunctions.put("userId", Lecture::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Lecture, Long>)Lecture::setUserId);
		attributeGetterFunctions.put("userName", Lecture::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Lecture, String>)Lecture::setUserName);
		attributeGetterFunctions.put("createDate", Lecture::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Lecture, Date>)Lecture::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Lecture::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Lecture, Date>)Lecture::setModifiedDate);
		attributeGetterFunctions.put("status", Lecture::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Lecture, Integer>)Lecture::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Lecture::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Lecture, Long>)Lecture::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Lecture::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Lecture, String>)Lecture::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Lecture::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Lecture, Date>)Lecture::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRecordedlectureId() {
		return _recordedlectureId;
	}

	@Override
	public void setRecordedlectureId(long recordedlectureId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recordedlectureId = recordedlectureId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_Title == null) {
			return "";
		}
		else {
			return _Title;
		}
	}

	@Override
	public void setTitle(String Title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Title = Title;
	}

	@JSON
	@Override
	public String getVideoURL() {
		if (_videoURL == null) {
			return "";
		}
		else {
			return _videoURL;
		}
	}

	@Override
	public void setVideoURL(String videoURL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_videoURL = videoURL;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Lecture.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Lecture.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Lecture toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Lecture>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LectureImpl lectureImpl = new LectureImpl();

		lectureImpl.setMvccVersion(getMvccVersion());
		lectureImpl.setUuid(getUuid());
		lectureImpl.setRecordedlectureId(getRecordedlectureId());
		lectureImpl.setTitle(getTitle());
		lectureImpl.setVideoURL(getVideoURL());
		lectureImpl.setGroupId(getGroupId());
		lectureImpl.setCompanyId(getCompanyId());
		lectureImpl.setUserId(getUserId());
		lectureImpl.setUserName(getUserName());
		lectureImpl.setCreateDate(getCreateDate());
		lectureImpl.setModifiedDate(getModifiedDate());
		lectureImpl.setStatus(getStatus());
		lectureImpl.setStatusByUserId(getStatusByUserId());
		lectureImpl.setStatusByUserName(getStatusByUserName());
		lectureImpl.setStatusDate(getStatusDate());

		lectureImpl.resetOriginalValues();

		return lectureImpl;
	}

	@Override
	public Lecture cloneWithOriginalValues() {
		LectureImpl lectureImpl = new LectureImpl();

		lectureImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		lectureImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		lectureImpl.setRecordedlectureId(
			this.<Long>getColumnOriginalValue("recordedlectureId"));
		lectureImpl.setTitle(this.<String>getColumnOriginalValue("Title"));
		lectureImpl.setVideoURL(
			this.<String>getColumnOriginalValue("videoURL"));
		lectureImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		lectureImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		lectureImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		lectureImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		lectureImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		lectureImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		lectureImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		lectureImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		lectureImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		lectureImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return lectureImpl;
	}

	@Override
	public int compareTo(Lecture lecture) {
		long primaryKey = lecture.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Lecture)) {
			return false;
		}

		Lecture lecture = (Lecture)object;

		long primaryKey = lecture.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Lecture> toCacheModel() {
		LectureCacheModel lectureCacheModel = new LectureCacheModel();

		lectureCacheModel.mvccVersion = getMvccVersion();

		lectureCacheModel.uuid = getUuid();

		String uuid = lectureCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			lectureCacheModel.uuid = null;
		}

		lectureCacheModel.recordedlectureId = getRecordedlectureId();

		lectureCacheModel.Title = getTitle();

		String Title = lectureCacheModel.Title;

		if ((Title != null) && (Title.length() == 0)) {
			lectureCacheModel.Title = null;
		}

		lectureCacheModel.videoURL = getVideoURL();

		String videoURL = lectureCacheModel.videoURL;

		if ((videoURL != null) && (videoURL.length() == 0)) {
			lectureCacheModel.videoURL = null;
		}

		lectureCacheModel.groupId = getGroupId();

		lectureCacheModel.companyId = getCompanyId();

		lectureCacheModel.userId = getUserId();

		lectureCacheModel.userName = getUserName();

		String userName = lectureCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			lectureCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			lectureCacheModel.createDate = createDate.getTime();
		}
		else {
			lectureCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lectureCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lectureCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		lectureCacheModel.status = getStatus();

		lectureCacheModel.statusByUserId = getStatusByUserId();

		lectureCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = lectureCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			lectureCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			lectureCacheModel.statusDate = statusDate.getTime();
		}
		else {
			lectureCacheModel.statusDate = Long.MIN_VALUE;
		}

		return lectureCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Lecture, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Lecture, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Lecture, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Lecture)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Lecture>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Lecture.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private String _uuid;
	private long _recordedlectureId;
	private String _Title;
	private String _videoURL;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Lecture, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Lecture)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("recordedlectureId", _recordedlectureId);
		_columnOriginalValues.put("Title", _Title);
		_columnOriginalValues.put("videoURL", _videoURL);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("recordedlectureId", 4L);

		columnBitmasks.put("Title", 8L);

		columnBitmasks.put("videoURL", 16L);

		columnBitmasks.put("groupId", 32L);

		columnBitmasks.put("companyId", 64L);

		columnBitmasks.put("userId", 128L);

		columnBitmasks.put("userName", 256L);

		columnBitmasks.put("createDate", 512L);

		columnBitmasks.put("modifiedDate", 1024L);

		columnBitmasks.put("status", 2048L);

		columnBitmasks.put("statusByUserId", 4096L);

		columnBitmasks.put("statusByUserName", 8192L);

		columnBitmasks.put("statusDate", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Lecture _escapedModel;

}